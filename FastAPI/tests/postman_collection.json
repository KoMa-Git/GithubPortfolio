{
	"info": {
		"_postman_id": "a8852f9a-fc51-406b-a8af-b7268582a4d7",
		"name": "FastAPI demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39842531",
		"_collection_link": "https://www.postman.com/tancsikr-4884/portfolio/collection/e4wymmu/fastapi-demo?action=share&source=collection_link&creator=39842531"
	},
	"item": [
		{
			"name": "Calculate with query params",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"operator\", \"multiply\");\r",
							"\r",
							"// import random and set x and y\r",
							"const lodash = require('lodash');\r",
							"\r",
							"pm.collectionVariables.set(\"varX\", lodash.random(10000))\r",
							"pm.collectionVariables.set(\"varY\", lodash.random(10000))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const x = pm.collectionVariables.get(\"varX\");\r",
							"const y = pm.collectionVariables.get(\"varY\");\r",
							"\r",
							"pm.test(\"Multiply is working\", function () {\r",
							"    pm.expect(response.Result).to.eql(x*y);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/calculate?x={{varX}}&y={{varY}}&operator={{operator}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"calculate"
					],
					"query": [
						{
							"key": "x",
							"value": "{{varX}}"
						},
						{
							"key": "y",
							"value": "{{varY}}"
						},
						{
							"key": "operator",
							"value": "{{operator}}",
							"description": "It could be plus/minus/multiply/divide"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Calculate with path params",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// add to a list all operator types\r",
							"const operatorSet = [\"plus\",\"minus\",\"multiply\",\"divide\"]\r",
							"// import random\r",
							"const lodash = require('lodash');\r",
							"\r",
							"// test with random x, y and operator\r",
							"pm.collectionVariables.set(\"operator\",operatorSet[lodash.random(operatorSet.length-1)])\r",
							"pm.collectionVariables.set(\"varX\", lodash.random(10000))\r",
							"pm.collectionVariables.set(\"varY\", lodash.random(10000))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const operator = pm.collectionVariables.get(\"operator\");\r",
							"\r",
							"// version 1 to test with random operator\r",
							"const capitalOperator = operator[0].toUpperCase() + operator.slice(1)\r",
							"\r",
							"pm.test( capitalOperator +\" is working\", function () {\r",
							"    const x = pm.collectionVariables.get(\"varX\");\r",
							"    const y = pm.collectionVariables.get(\"varY\");\r",
							"    if (operator == \"plus\") {\r",
							"        pm.expect(response.Result).to.eql(x+y);\r",
							"    } else if(operator == \"minus\") {\r",
							"        pm.expect(response.Result).to.eql(x-y);\r",
							"    }  else if(operator == \"multiply\") {\r",
							"        pm.expect(response.Result).to.eql(x*y);\r",
							"    }  else if(operator == \"divide\") {\r",
							"        pm.expect(response.Result).to.eql(x/y);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/calculate/{{varX}}-{{operator}}-{{varY}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"calculate",
						"{{varX}}-{{operator}}-{{varY}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a random quote",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Header Content-Type is including json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Author is existing\", function () {\r",
							"    pm.expect(response).to.have.property(\"author\");\r",
							"});\r",
							"\r",
							"pm.test(\"Quote is existing\", function () {\r",
							"    pm.expect(response).to.have.property(\"quote\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/get-a-quote",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"get-a-quote"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of employees SQL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const id = pm.collectionVariables.get(\"employeeId\")\r",
							"pm.test(\"Employee with required id exists\"), function () {\r",
							"    pm.expect(response).to.have.key(id.toString())\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/read_database",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"read_database"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add employee SQL",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// set age parameter to a random integer between 18 and 65\r",
							"\r",
							"const lodash = require(\"lodash\");\r",
							"\r",
							"pm.collectionVariables.set(\"employeeAge\", lodash.random(18,65));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// set employeeId according to response for further requests\r",
							"const response = pm.response.json();\r",
							"const info = response[\"Info\"];\r",
							"const splittedInfo = info.split(\" \");\r",
							"const id = splittedInfo[splittedInfo.length - 1];\r",
							"\r",
							"pm.collectionVariables.set(\"employeeId\", id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/insert_into_database?name={{$randomFullName}}&age={{employeeAge}}&position= {{$randomJobTitle}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"insert_into_database"
					],
					"query": [
						{
							"key": "name",
							"value": "{{$randomFullName}}"
						},
						{
							"key": "age",
							"value": "{{employeeAge}}"
						},
						{
							"key": "position",
							"value": " {{$randomJobTitle}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete employee SQL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Employee id doesn't exists\", function () {\r",
							"    pm.expect(response).to.have.any.key(\"Error\");\r",
							"    pm.expect(response.Error).to.include(\"not existing\");\r",
							"})\r",
							"\r",
							"pm.test(\"Employee successfully deleted\", function () {\r",
							"    pm.expect(response).to.have.any.key(\"Info\");\r",
							"    pm.expect(response.Info).to.include(\"successfully deleted\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/delete_from_database?id={{employeeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delete_from_database"
					],
					"query": [
						{
							"key": "id",
							"value": "{{employeeId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List of employee ORM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"All keys are exists according to docs\", function () {\r",
							"    pm.expect(response[0]).to.have.keys(\"age\",\"position\",\"employee_id\",\"full_name\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/view",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"view"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add employee ORM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"// set employeeId according to response for the further requests\r",
							"pm.collectionVariables.set(\"employeeId\", response.employee_id);\r",
							"\r",
							"pm.test(\"Adding employee was successful\", function () {\r",
							"    pm.expect(response).to.have.keys(\"employee_id\",\"full_name\",\"position\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"full_name\": \"{{$randomFullName}}\",\r\n    \"age\": {{employeeAge}},\r\n    \"position\": \"{{$randomJobType}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/employee",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"employee"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update employee data ORM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Updated successfully\", function () {\r",
							"    pm.expect(response).to.have.any.keys(\"full_name\",\"position\");\r",
							"    pm.expect(response.full_name).is.eql(\"John Doe\");\r",
							"    pm.expect(response.position).is.eql(\"Bingo Manager\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"full_name\": \"John Doe\",\r\n    \"age\" : 99,\r\n    \"position\" : \"Bingo Manager\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/employee/{{employeeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"employee",
						"{{employeeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete employee ORM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"console.log(response)\r",
							"\r",
							"pm.test(\"Employee deleted successfully\", function () {\r",
							"    pm.expect(response).to.have.any.key(\"ok\");\r",
							"    pm.expect(response.ok).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/employee/{{employeeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"employee",
						"{{employeeId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://fastapi-demo-iynq.onrender.com"
		},
		{
			"key": "varX",
			"value": ""
		},
		{
			"key": "varY",
			"value": ""
		},
		{
			"key": "operator",
			"value": ""
		},
		{
			"key": "employeeId",
			"value": ""
		},
		{
			"key": "employeeAge",
			"value": "",
			"type": "default"
		}
	]
}
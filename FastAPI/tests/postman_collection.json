{
	"info": {
		"_postman_id": "a8852f9a-fc51-406b-a8af-b7268582a4d7",
		"name": "FastAPI demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39842531"
	},
	"item": [
		{
			"name": "Calculate with query params",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"operator\", \"multiply\");\r",
							"\r",
							"// import random and set x and y\r",
							"const lodash = require('lodash');\r",
							"\r",
							"pm.collectionVariables.set(\"varX\", lodash.random(10000))\r",
							"pm.collectionVariables.set(\"varY\", lodash.random(10000))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const x = pm.collectionVariables.get(\"varX\");\r",
							"const y = pm.collectionVariables.get(\"varY\");\r",
							"\r",
							"pm.test(\"Multiply is working\", function () {\r",
							"    pm.expect(response.Result).to.eql(x*y);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/calculate?x={{varX}}&y={{varY}}&operator={{operator}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"calculate"
					],
					"query": [
						{
							"key": "x",
							"value": "{{varX}}"
						},
						{
							"key": "y",
							"value": "{{varY}}"
						},
						{
							"key": "operator",
							"value": "{{operator}}",
							"description": "It could be plus/minus/multiply/divide"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Calculate with path params",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// add to a list all operator types\r",
							"const operatorSet = [\"plus\",\"minus\",\"multiply\",\"divide\"]\r",
							"// import random\r",
							"const lodash = require('lodash');\r",
							"\r",
							"// test with random x, y and operator\r",
							"pm.collectionVariables.set(\"operator\",operatorSet[lodash.random(operatorSet.length-1)])\r",
							"pm.collectionVariables.set(\"varX\", lodash.random(10000))\r",
							"pm.collectionVariables.set(\"varY\", lodash.random(10000))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const operator = pm.collectionVariables.get(\"operator\");\r",
							"\r",
							"// version 1 to test with random operator\r",
							"const capitalOperator = operator[0].toUpperCase() + operator.slice(1)\r",
							"\r",
							"pm.test( capitalOperator +\" is working\", function () {\r",
							"    const x = pm.collectionVariables.get(\"varX\");\r",
							"    const y = pm.collectionVariables.get(\"varY\");\r",
							"    if (operator == \"plus\") {\r",
							"        pm.expect(response.Result).to.eql(x+y);\r",
							"    } else if(operator == \"minus\") {\r",
							"        pm.expect(response.Result).to.eql(x-y);\r",
							"    }  else if(operator == \"multiply\") {\r",
							"        pm.expect(response.Result).to.eql(x*y);\r",
							"    }  else if(operator == \"divide\") {\r",
							"        pm.expect(response.Result).to.eql(x/y);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/calculate/{{varX}}-{{operator}}-{{varY}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"calculate",
						"{{varX}}-{{operator}}-{{varY}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a random quote",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Header Content-Type is including json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Author is existing\", function () {\r",
							"    pm.expect(response).to.have.property(\"author\");\r",
							"});\r",
							"\r",
							"pm.test(\"Quote is existing\", function () {\r",
							"    pm.expect(response).to.have.property(\"quote\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/get-a-quote",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"get-a-quote"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://fastapi-demo-iynq.onrender.com"
		},
		{
			"key": "varX",
			"value": ""
		},
		{
			"key": "varY",
			"value": ""
		},
		{
			"key": "operator",
			"value": ""
		}
	]
}